import com.android.resources.Density
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.TransformerFactory
import javax.xml.transform.OutputKeys
import com.android.ide.common.vectordrawable.VdPreview
import javax.imageio.ImageIO
import org.apache.commons.text.StrBuilder

class C2M {
    final map = [:]
    C2M(Closure closure) {
        closure.delegate = this
        closure()
    }
    def methodMissing(String name, args) { map[name] = args[0] }
}

class ThemesExtension {
    final static String dimension = "default_theme_extension_dimension_name"
    protected def parent
    protected def tasks
    private Project project
    public boolean hasTheme = false
    public def generateTask = null
    protected String path

    ThemesExtension(project, parent, tasks) {
        this.project = project
        this.parent = parent
        this.tasks = tasks
        def parentName = parent.name.capitalize()
        path = "/build/themed/${parentName}/res"
        colorsMap = [:]
        colorsMapVector = [:]
        def generateColorsTask = project.task("generate${parentName}Themes", type: GenerateColors) {
            outputFile project.file("${this.path}/values/colors.xml")
            colorsMap this.colorsMap
        }
        def generateThemedDrawablesTask = project.task("generate${parentName}ThemedVectorDrawables", type: GenerateThemedVectorDrawable) {
            inputDir = project.file("/themed/drawable")
            outputDir = project.file("${this.path}/drawable")
            colorsMapVector this.colorsMapVector
        }
        generateThemedDrawablesTask.dependsOn(generateColorsTask)
        generateTask = project.task("generate${parentName}ThemedMipmaps", type: GenerateThemedMipmapsVectorDrawable) {
            inputDir = project.file("/themed/mipmap")
            outputDirs = GenerateThemedMipmapsVectorDrawable.sizes.collectEntries{[(it) : project.file("${this.path}/mipmap-${it.getResourceValue()}")]}
            colorsMapVector this.colorsMapVector
        }
        generateTask.dependsOn(generateThemedDrawablesTask)
    }

    public Map<String, String> colorsMap
    public Map<String, String> colorsMapVector

    void createTask(variantName) {
        if(hasTheme) {
            tasks.findByName("generate${variantName.capitalize()}ResValues").dependsOn(generateTask)
        }
    }
    void setHasTheme() {
        if (!parent.getDimension()?.trim()) {
            List<String> dim = project.android.getFlavorDimensionList()
            if (dim == null)
                project.android.flavorDimensions([dimension] as String[])
            else if (!dim.contains(dimension))
                project.android.flavorDimensions((dim + dimension) as String[])
            parent.setDimension(dimension)
        }
        hasTheme = true
        def sourceSets = project.android.sourceSets
        sourceSets[parent.name].res.srcDirs(path)
    }

    static String format(v) { return String.format("#%08X", (v & 0xff000000) == 0 ? (v | 0xff000000) : v) }

    @SuppressWarnings("GroovyUnusedDeclaration")
    def colors(Closure closure) {
        new C2M(closure).map.each { k, v -> putToMaps(k, format(v))}
        setHasTheme()
    }

    def putToMaps(k, v){
        colorsMap.put(k, v)
        colorsMapVector.put("=\"@color/"+ k + "\"", "=\"" + v + "\"")
    }

    @SuppressWarnings("GroovyUnusedDeclaration")
    def colorsWithAlpha(Closure closure) {
        new C2M(closure).map.collectEntries { k, v ->
            [(k): format(v)] + (1..9).collectEntries { i ->
                [(k + "A" + i + "0"): format(v + ((int) (i * 25.5) * 0x1000000))]
            }
        }.each { k, v -> putToMaps(k, v)}
        setHasTheme()
    }
}

class GenerateThemedVectorDrawable  extends DefaultTask {
    @SkipWhenEmpty
    @InputDirectory
    @SuppressWarnings("GroovyUnusedDeclaration")
    def inputDir
    @OutputDirectory
    def outputDir
    @Input
    @SkipWhenEmpty
    Map<String, String> colorsMapVector
    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    void execute(IncrementalTaskInputs inputs){
        if (!inputs.incremental)
            project.delete(outputDir.listFiles())
        inputs.outOfDate { change ->
            def targetFile = project.file("$outputDir/${change.file.name}")
            def vector = new StrBuilder(change.file.text)
            colorsMapVector.each { n, v ->  vector.replaceAll(n, v) }
            targetFile.text = vector.toString()
        }
        inputs.removed { change ->
            def targetFile = project.file("$outputDir/${change.file.name}")
            if (targetFile.exists()) {
                targetFile.delete()
            }
        }
    }
}

class GenerateThemedMipmapsVectorDrawable  extends DefaultTask {
    public static final def sizes = [ Density.MEDIUM, Density.HIGH, Density.XHIGH, Density.XXHIGH, Density.XXXHIGH ]
    @SkipWhenEmpty
    @InputDirectory
    @SuppressWarnings("GroovyUnusedDeclaration")
    def inputDir
    @OutputDirectories
    Map<Density, File> outputDirs
    @Input
    @SkipWhenEmpty
    Map<String, String> colorsMapVector
    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    void execute(IncrementalTaskInputs inputs){
        if (!inputs.incremental)
            outputDirs.each{project.delete(it.getValue())}
        inputs.outOfDate { change ->
            def vector = new StrBuilder(change.file.text)
            colorsMapVector.each { n, v ->  vector.replaceAll(n, v) }
            outputDirs.each {
                float scaleFactor = it.getKey().getDpiValue() / (float) Density.MEDIUM.getDpiValue()
                if (scaleFactor <= 0) {
                    scaleFactor = 1.0f
                }
                def imageSize = VdPreview.TargetSize.createSizeFromScale(scaleFactor)
                def image = VdPreview.getPreviewFromVectorXml(imageSize, vector.toString(), null)
                def fileOut = project.file("${it.getValue()}/${change.file.name.replace(".xml", ".png")}")
                fileOut.parentFile.mkdirs()
                ImageIO.write(image, "png", fileOut)
            }
        }
        inputs.removed { change ->
            outputDirs.each {
                def file = project.file("${it.getValue()}/${change.file.name.replace(".xml", ".png")}")
                if(file.exists())
                    file.delete()
            }
        }
    }
}


class GenerateColors extends DefaultTask {
    @OutputFile
    File outputFile
    @Input
    @SkipWhenEmpty
    Map<String, String> colorsMap
    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    void execute(IncrementalTaskInputs inputs){
        def docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder()
        def doc = docBuilder.newDocument()
        def resources = doc.createElement('resources')
        doc.appendChild(resources)
        colorsMap.each { n, v ->
            def color = doc.createElement('color')
            color.setAttribute('name', n)
            color.appendChild(doc.createTextNode(v))
            resources.appendChild(color)
        }
        def domSource= new DOMSource(doc)
        def result = new StreamResult(outputFile)
        def tf = TransformerFactory.newInstance()
        def transformer = tf.newTransformer()
        transformer.setOutputProperty(OutputKeys.INDENT, 'yes')
        transformer.transform(domSource, result)
    }
}

android {
    productFlavors.whenObjectAdded { parent ->
        parent.extensions.create("themes", ThemesExtension, project, parent, tasks)
    }
    afterEvaluate {
        android.applicationVariants.each { variant ->
            variant.getProductFlavors().each{it.themes.createTask(variant.name)}
        }
    }
}

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools:sdk-common:26.0.0'
        classpath 'org.apache.commons:commons-text:1.1'
    }
}



