import com.android.resources.Density
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.TransformerFactory
import javax.xml.transform.OutputKeys
import com.android.ide.common.vectordrawable.VdPreview
import javax.imageio.ImageIO
import org.apache.commons.text.TextStringBuilder
import org.gradle.work.InputChanges
import org.gradle.work.ChangeType

class C2M {
    final map = [:]

    C2M(closure) {
        closure.delegate = this
        closure()
    }

    def methodMissing(String name, args) { map[name] = args[0] }
}

class ThemesExtension {
    final static String dimension = "default_theme_extension_dimension_name"
    protected def flavour
    private Project project
    public boolean hasTheme = false
    public def generateTask = null
    def task = null
    protected String path

    ThemesExtension(project, flavour) {
        this.project = project
        this.flavour = flavour
        colorsMap = [:]
        colorsMapVector = [:]
    }

    public Map<String, String> colorsMap
    public Map<String, String> colorsMapVector

    void createTask(variant) {
        if (hasTheme) {
            if(task == null)
                task = generateTask.get()
            if (variant.respondsTo("registerGeneratedResFolders")) {
                task.ext.generatedResFolders = project.files(path).builtBy(task)
                variant.registerGeneratedResFolders(task.generatedResFolders)
                if (variant.respondsTo("getMergeResourcesProvider")) {
                    variant.mergeResourcesProvider.configure { dependsOn(task) }
                } else {
                    variant.mergeResources.dependsOn(task)
                }
            } else {
                variant.registerResGeneratingTask(task, path)
            }
        }
    }

    void setHasTheme() {
        if (!flavour.getDimension()?.trim()) {
            List<String> dim = project.android.getFlavorDimensionList()
            if (dim == null)
                project.android.flavorDimensions([dimension] as String[])
            else if (!dim.contains(dimension))
                project.android.flavorDimensions((dim + dimension) as String[])
            flavour.setDimension(dimension)
        }
        hasTheme = true
    }

    static String format(v) {
        return String.format("#%08X", (v & 0xff000000) == 0 ? (v | 0xff000000) : v)
    }

    @SuppressWarnings("GroovyUnusedDeclaration")
    void colors(closure) {
        new C2M(closure).map.each { k, v -> putToMaps(k, format(v)) }
    }

    void putToMaps(k, v) {
        colorsMap.put(k, v)
        colorsMapVector.put("=\"@color/" + k + "\"", "=\"" + v + "\"")
    }

    @SuppressWarnings("GroovyUnusedDeclaration")
    void data(closure) {
        closure.delegate = this
        closure()
        def flavourName = flavour.name.capitalize()
        path = "${project.buildDir}/generated/res/themed/${flavourName}"
        def generateColorsTask = project.tasks.register("generate${flavourName}Themes", GenerateColors) {
            outputFile project.file("${this.path}/values/colors.xml")
            colorsMap this.colorsMap
        }
        println "${project.file('/themed/drawable')} :  ${project.file('/themed/drawable').exists()}"
        if (project.file("/themed/drawable").exists()) {
            generateTask = project.tasks.register("generate${flavourName}ThemedVectorDrawables", GenerateThemedVectorDrawable) {
                inputDir = project.file("/themed/drawable")
                outputDir = project.file("${this.path}/drawable")
                colorsMapVector this.colorsMapVector
                dependsOn(generateColorsTask)
            }
        }
        println "${project.file('/themed/mipmap')} :  ${project.file('/themed/mipmap').exists()}"
        if (project.file("/themed/mipmap").exists()) {
            generateTask = project.tasks.register("generate${flavourName}ThemedMipmaps", GenerateThemedMipmapsVectorDrawable) {
                inputDir = project.file("/themed/mipmap")
                outputDirs = GenerateThemedMipmapsVectorDrawable.sizes.collectEntries {
                    [(it): project.file("${this.path}/mipmap-${it.getResourceValue()}")]
                }
                colorsMapVector this.colorsMapVector
                dependsOn(generateColorsTask)
            }
        }
        if(generateTask == null)
            generateTask = generateColorsTask
        setHasTheme()
    }

    @SuppressWarnings("GroovyUnusedDeclaration")
    void colorsWithAlpha(closure) {
        new C2M(closure).map.collectEntries { k, v ->
            [(k): format(v)] + (1..9).collectEntries { i ->
                String key = "${k}A${i}0"
                [(key): format(v + ((int) (i * 25.5) * 0x1000000))]
            }
        }.each { k, v -> putToMaps(k, v) }
    }

    String getPath(){
        return path
    }

}

class GenerateThemedVectorDrawable extends DefaultTask {
    @SkipWhenEmpty
    @InputDirectory
    def inputDir
    @OutputDirectory
    def outputDir
    @Input
    Map<String, String> colorsMapVector

    @TaskAction
    void execute(InputChanges inputChanges) {
        if (!inputChanges.incremental)
            project.delete(outputDir.listFiles())
        inputChanges.getAllFileChanges().each { change ->
            if (change.changeType == ChangeType.ADDED || change.changeType == ChangeType.MODIFIED) {
                def targetFile = project.file("$outputDir/${change.file.name}")
                def vector = new TextStringBuilder(change.file.text)
                colorsMapVector.each { n, v -> vector.replaceAll(n, v) }
                targetFile.text = vector.toString()
            }
            if (change.changeType == ChangeType.REMOVED) {
                def targetFile = project.file("$outputDir/${change.file.name}")
                if (targetFile.exists()) {
                    targetFile.delete()
                }
            }
        }
    }
}

class GenerateThemedMipmapsVectorDrawable extends DefaultTask {
    public static final
    def sizes = [Density.MEDIUM, Density.HIGH, Density.XHIGH, Density.XXHIGH, Density.XXXHIGH]
    @SkipWhenEmpty
    @InputDirectory
    File inputDir
    @OutputDirectories
    Map<Density, File> outputDirs
    @Input
    Map<String, String> colorsMapVector


    @TaskAction
    void execute(InputChanges inputChanges) {
        if (!inputChanges.incremental)
            outputDirs.each { project.delete(it.getValue()) }

        inputChanges.getAllFileChanges().each { change ->
            if (change.fileType == FileType.DIRECTORY)
                return
            if(change.changeType == ChangeType.ADDED || change.changeType == ChangeType.MODIFIED) {
                if (change.file.isFile()) {
                    def vector = new TextStringBuilder(change.file.text)
                    colorsMapVector.each { n, v -> vector.replaceAll(n, v) }
                    outputDirs.each {
                        float scaleFactor = it.getKey().getDpiValue() / (float) Density.MEDIUM.getDpiValue()
                        if (scaleFactor <= 0) {
                            scaleFactor = 1.0f
                        }
                        def imageSize = VdPreview.TargetSize.createFromScale(scaleFactor)
                        def image = VdPreview.getPreviewFromVectorXml(imageSize, vector.toString(), null)
                        def fileOut = project.file("${it.getValue()}/${change.file.name.replace(".xml", ".png")}")
                        fileOut.parentFile.mkdirs()
                        println fileOut
                        ImageIO.write(image, "png", fileOut)
                    }
                }
            }
            if(change.changeType == ChangeType.REMOVED) {
                outputDirs.each {
                    def file = project.file("${it.getValue()}/${change.file.name.replace(".xml", ".png")}")
                    if (file.exists())
                        file.delete()
                }
            }
        }
    }
}

class GenerateColors extends DefaultTask {
    @OutputFile
    File outputFile
    @Input
    Map<String, String> colorsMap

    @SuppressWarnings("GroovyUnusedDeclaration")
    @TaskAction
    void execute(InputChanges inputChanges) {
        def docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder()
        def doc = docBuilder.newDocument()
        def resources = doc.createElement('resources')
        doc.appendChild(resources)
        colorsMap.each { n, v ->
            def color = doc.createElement('color')
            color.setAttribute('name', n)
            color.appendChild(doc.createTextNode(v))
            resources.appendChild(color)
        }
        def domSource = new DOMSource(doc)
        def result = new StreamResult(outputFile)
        def tf = TransformerFactory.newInstance()
        def transformer = tf.newTransformer()
        transformer.setOutputProperty(OutputKeys.INDENT, 'yes')
        transformer.transform(domSource, result)
    }
}

android {
    productFlavors.whenObjectAdded { flavour ->
        flavour.extensions.create("themes", ThemesExtension, project, flavour)
    }
    applicationVariants.all { variant ->
        variant.productFlavors.each { it.themes.createTask(variant) }
    }
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools:sdk-common:30.4.0'
        classpath 'org.apache.commons:commons-text:1.9'
    }
}
