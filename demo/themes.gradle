public class ThemesExtension {
    def parent


    public ThemesExtension(parentIn) {
        parent = parentIn
    }

    public ThemesExtension(parentIn, int colorPrimary, int colorPrimaryDark, int colorPrimaryLight, int colorAccent, int colorDisabled) {
        parent = parentIn
        useTheme(colorPrimary, colorPrimaryDark, colorPrimaryLight, colorAccent, colorDisabled)
    }

    public useTheme(int colorPrimary, int colorPrimaryDark, int colorPrimaryLight, int colorAccent, int colorDisabled) {
        def colors = [:]
        colors["colorPrimary"] = String.format("#%06X", colorPrimary)
        colors["colorPrimaryDark"] = String.format("#%06X", colorPrimaryDark)
        colors["colorPrimaryLight"] = String.format("#%06X", colorPrimaryLight)
        colors["colorAccent"] = String.format("#%06X", colorAccent)
        colors["colorDisabled"] = String.format("#%06X", colorDisabled)
        for (i in 1..9) {
            def alpha = (int) (i * 25.5)
            colors["colorPrimary" + "A" + i + "0"] = String.format("#%02X%06X", alpha, colorPrimary)
            colors["colorPrimaryDark" + "A" + i + "0"] = String.format("#%02X%06X", alpha, colorPrimaryDark)
            colors["colorAccent" + "A" + i + "0"] = String.format("#%02X%06X", alpha, colorAccent)
            colors["colorDisabled" + "A" + i + "0"] = String.format("#%02X%06X", alpha, colorDisabled)
        }
        colors.each {n, v ->
            this.parent.resValue("color", n, v)
        }
    }
}
ext {
    themes_createExtension = { parent, colorPrimary, colorPrimaryDark, colorPrimaryLight, colorAccent, colorDisabled ->
        parent.extensions.create("themes", ThemesExtension, parent, colorPrimary, colorPrimaryDark, colorPrimaryLight, colorAccent, colorDisabled)
    }
    themes_createExtension = { parent ->
        parent.extensions.create("themes", ThemesExtension, parent)
    }
}